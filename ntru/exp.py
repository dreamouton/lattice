from sage.all import matrix, vector, ZZ, inverse_mod
from Crypto.Util.number import long_to_bytes

h = 28145650742062475923251141464616035804971461822109166059786880113016713178100288185064677978318103934166841017542829152199120938827438451204363247833044872997163461398765136546564460597097262937808549601230337885165585415783726123262267576135928498540181857588677374488744184591980784104366736454117204524056226065524635318291247160817884003228443067724505281149585321108030003380916495264582540182718919099832179307042872627698320978541773977028543637072627528730724305679725527453731558118028789061472020600045219036919187375024909067883139844825863548687480047943729105446978598939713888977437436203972203397018087
p = 31618225504961235968180184458882878894966028006704129927873496581271513918369753973008288752592088035758244755979376990625093239860946931295320149819523468549264764702992682709344834366010050021666326251751954634925306029434363689898453327436780366547654194258223586459442366452529656151395278713997609269236011273217856735926900087693273702700385448516274060243506373139665655522377162542869137775452236212865830172505239586286590165631110275991589221626270491829599381720996952627867027185993798847122463773702333132791812186026984513054754176115081714417678612618426456698958480014745239940675736972250887592134349
c = 26089373174202389491370052049165472329544397709753457789216358635220550322704113847150000571333317111775393495065173573032021673925807849704006952541641414652070225945572828358391177643977178070569498532777246546782598331254977472802844987899092803017971538963322311025332367161597867620671131152736063817485049434745052849027976971468521397723995458081398358645415075972448679322441322367854272355673339274933341907960342412365060610975890274540304281642689976898558691555072417488137032989082215330305282941799542851236406590618031612537944554641817368023271161799562762843180343171964424824090971452239039978156744

def decrypt(p, h, f, g, c):
    a = (f*c) % p
    flag = (a*inverse_mod(f, g)) % g
    return flag

v1 = vector(ZZ, [1, h])
v2 = vector(ZZ, [0, p])

'''
def gauss(v1, v2):
    while True:
        if v2.norm() < v1.norm():
            v1, v2 = v2, v1
        m = round(v1*v2/(v1*v1))
        if m == 0:
            return v1, v2
        v2 = v2-m*v1

f, g = gauss(v1, v2)[0]
'''

f, g = matrix([v1, v2]).LLL()[0] # shortest_vector = lattice.LLL()[0]
#print('f = ', f)
#print('g = ', g)

flag = decrypt(p, h, f, g, c)
#print(flag)
print(long_to_bytes(flag))

# Flag: jason{d0_y0u_l1k3_b1g_ch1ck3n_drum571ck5}
